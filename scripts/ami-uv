#!/usr/bin/env bash
# ami-uv: Universal UV execution wrapper for AMI Orchestrator
# Use this instead of direct uv commands
#
# Always uses root .venv uv, auto-targets nearest .venv with --python flag
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Always use root .venv uv
ROOT_UV="$ROOT_DIR/.venv/bin/uv"

if [[ ! -x "$ROOT_UV" ]]; then
    echo "Error: uv not found in root venv at $ROOT_UV" >&2
    echo "Run: $ROOT_DIR/.venv/bin/pip install uv" >&2
    exit 1
fi

# Find nearest .venv by walking up from PWD
find_venv() {
    local search_dir="$PWD"
    while [[ "$search_dir" != "/" ]]; do
        if [[ -d "$search_dir/.venv" ]]; then
            echo "$search_dir/.venv"
            return 0
        fi
        search_dir="$(dirname "$search_dir")"
    done

    # Fallback to root .venv
    if [[ -d "$ROOT_DIR/.venv" ]]; then
        echo "$ROOT_DIR/.venv"
        return 0
    fi

    return 1
}

VENV_DIR="$(find_venv)"
if [[ -z "$VENV_DIR" ]]; then
    echo "Error: No .venv found in hierarchy from $PWD to root" >&2
    exit 1
fi

VENV_PYTHON="$VENV_DIR/bin/python"

if [[ ! -x "$VENV_PYTHON" ]]; then
    echo "Error: python not found in venv at $VENV_PYTHON" >&2
    exit 1
fi

# Inject --python flag for commands that need it
case "${1:-}" in
    pip|add|remove|sync)
        exec "$ROOT_UV" "$1" --python "$VENV_PYTHON" "${@:2}"
        ;;
    *)
        exec "$ROOT_UV" "$@"
        ;;
esac
